# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  bkstgrg: 'azDevTRTesR01'
  bkstg: 'cirazadopstest01'
  bkcontenaire: 'tfstate'
  bkstgkey: 'devpipeline.terraform.tfstate'

stages:
  - stage: tfvalalide
    jobs:
      - job: valalide
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: init
            inputs:
              command: 'init'
              backendType: 'azurerm'
              backendServiceArm: 'DevServiceConnection'
              backendAzureRmResourceGroupName: '$(bkstgrg)'
              backendAzureRmStorageAccountName: '$(bkstg)'
              backendAzureRmContainerName: '$(bkcontenaire)'
              backendAzureRmKey: '$(bkstgkey)'
              allowTelemetryCollection: true
          - task: TerraformCLI@0
            displayName: validate
            inputs:
              command: 'validate'
              allowTelemetryCollection: true
  - stage: tfdeploy
    condition: succeeded ('tfvalalide')
    dependsOn: tfvalalide
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: init
            inputs:
              command: 'init'
              backendType: 'azurerm'
              backendServiceArm: 'DevServiceConnection'
              backendAzureRmResourceGroupName: '$(bkstgrg)'
              backendAzureRmStorageAccountName: '$(bkstg)'
              backendAzureRmContainerName: '$(bkcontenaire)'
              backendAzureRmKey: '$(bkstgkey)'
              allowTelemetryCollection: true
          - task: TerraformCLI@0
            displayName: plan
            inputs:
              command: 'plan'
              environmentServiceName: 'DevServiceConnection'
              allowTelemetryCollection: true
          - task: TerraformCLI@0
            displayName: apply
            inputs:
              command: 'apply'
              environmentServiceName: 'DevServiceConnection'
              allowTelemetryCollection: true



